var _user$project$Question$findFeedback = F3(
	function (answer, response, distractors) {
		findFeedback:
		while (true) {
			var _p0 = distractors;
			if (_p0.ctor === '[]') {
				return A2(_elm_lang$core$Basics_ops['++'], 'Incorrect. The answer is ', answer);
			} else {
				var _p1 = _p0._0;
				if (_elm_lang$core$Native_Utils.eq(
					_elm_lang$core$Basics$fst(_p1),
					response) || _elm_lang$core$Native_Utils.eq(
					_elm_lang$core$Basics$fst(_p1),
					'')) {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$snd(_p1),
						A2(_elm_lang$core$Basics_ops['++'], ' The answer is ', answer));
				} else {
					var _v1 = answer,
						_v2 = response,
						_v3 = _p0._1;
					answer = _v1;
					response = _v2;
					distractors = _v3;
					continue findFeedback;
				}
			}
		}
	});
var _user$project$Question$Question = F4(
	function (a, b, c, d) {
		return {question: a, distractors: b, answer: c, format: d};
	});
var _user$project$Question$MultipleChoice = {ctor: 'MultipleChoice'};
var _user$project$Question$newQuestion = F2(
	function (randomValues, index) {
		var rec = _user$project$MyRecords$randomRecord(randomValues);
		var randKey = A3(
			_user$project$RandomStuff$pickOne,
			A2(_elm_lang$core$List$drop, 20, randomValues),
			_user$project$MyRecords$recordKeys(rec),
			'foo');
		var strExpr = A2(
			_elm_lang$core$Basics_ops['++'],
			'#',
			A2(_elm_lang$core$Basics_ops['++'], randKey, ' e'));
		var allKeys = _user$project$MyRecords$recordKeys(rec);
		var valueDistractors = A2(
			_elm_lang$core$List$map,
			function (k) {
				return _user$project$MyRecords$recordValueToString(
					A2(
						_elm_lang$core$Maybe$withDefault,
						{
							ctor: '_Tuple2',
							_0: 'foo',
							_1: _user$project$MyRecords$RandomString('foo')
						},
						A2(_user$project$MyRecords$extractItemFromRecord, rec, k)));
			},
			allKeys);
		var typeDistractors = A2(_elm_lang$core$List$map, _user$project$MyRecords$recordItemToTypeString, rec);
		if (_elm_lang$core$Native_Utils.eq(index, 1)) {
			var answer$ = _user$project$MyRecords$recordValueToString(
				A2(
					_elm_lang$core$Maybe$withDefault,
					{
						ctor: '_Tuple2',
						_0: 'foo',
						_1: _user$project$MyRecords$RandomString('foo')
					},
					A2(_user$project$MyRecords$extractItemFromRecord, rec, randKey)));
			var _p2 = A2(
				_elm_lang$core$List$partition,
				function (d) {
					return _elm_lang$core$Native_Utils.eq(d, answer$);
				},
				_user$project$RandomStuff$compressList(
					A2(_elm_lang$core$List$append, valueDistractors, typeDistractors)));
			var distractors$ = _p2._1;
			var question$ = _elm_lang$core$Native_List.fromArray(
				[
					'What is the value of ans after the following ML expressions are evaluated?',
					'',
					A2(
					_elm_lang$core$Basics_ops['++'],
					'val e = ',
					_user$project$MyRecords$recordToString(rec)),
					A2(_elm_lang$core$Basics_ops['++'], 'val ans = ', strExpr),
					''
				]);
			return {
				question: question$,
				distractors: A2(
					_elm_lang$core$List$map,
					function (dis) {
						return {ctor: '_Tuple2', _0: dis, _1: 'Incorrect.'};
					},
					distractors$),
				answer: {ctor: '_Tuple2', _0: answer$, _1: 'Correct'},
				format: _user$project$Question$MultipleChoice
			};
		} else {
			var answer$ = _user$project$MyRecords$recordItemToTypeString(
				A2(
					_elm_lang$core$Maybe$withDefault,
					{
						ctor: '_Tuple2',
						_0: 'foo',
						_1: _user$project$MyRecords$RandomString('foo')
					},
					A2(_user$project$MyRecords$extractItemFromRecord, rec, randKey)));
			var _p3 = A2(
				_elm_lang$core$List$partition,
				function (d) {
					return _elm_lang$core$Native_Utils.eq(d, answer$);
				},
				_user$project$RandomStuff$compressList(
					A2(_elm_lang$core$List$append, valueDistractors, typeDistractors)));
			var distractors$ = _p3._1;
			var question$ = _elm_lang$core$Native_List.fromArray(
				[
					'What is the type of ans after the following ML expressions are evaluated?',
					'',
					A2(
					_elm_lang$core$Basics_ops['++'],
					'val e = ',
					_user$project$MyRecords$recordToString(rec)),
					A2(_elm_lang$core$Basics_ops['++'], 'val ans = ', strExpr),
					''
				]);
			return {
				question: question$,
				distractors: A2(
					_elm_lang$core$List$map,
					function (dis) {
						return {ctor: '_Tuple2', _0: dis, _1: 'Incorrect.'};
					},
					distractors$),
				answer: {ctor: '_Tuple2', _0: answer$, _1: 'Correct'},
				format: _user$project$Question$MultipleChoice
			};
		}
	});
var _user$project$Question$FillInTheBlank = {ctor: 'FillInTheBlank'};
var _user$project$Question$emptyQuestion = {
	question: _elm_lang$core$Native_List.fromArray(
		[]),
	distractors: _elm_lang$core$Native_List.fromArray(
		[]),
	answer: {ctor: '_Tuple2', _0: '', _1: ''},
	format: _user$project$Question$FillInTheBlank
};
